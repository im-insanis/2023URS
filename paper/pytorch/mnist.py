# -*- coding: utf-8 -*-
"""MNIST.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ctwvY1X2Kwb6Y1fBsC_CZ255AdtmOdwM

#전체 코드 순서
####import -> GPU -> 데이터셋 다운 -> 파라미터 설정 -> 데이터 로드 -> CNN 구성(모델 설계) -> 비용 함수 & optimizer -> 학습 -> 평가

#import
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import torchvision.datasets as dsets
import torchvision.transforms as transforms
import torch.nn.init
import torch.optim as optim

"""#device"""

device='cuda' if torch.cuda.is_available() else 'cpu'
torch.manual_seed(777)

"""#DataSet"""

train_data=dsets.MNIST(root='MNIST_data/',
                       train=True,
                       transform=transforms.ToTensor(),
                       download=True)

test_data=dsets.MNIST(root='MNIST_data/',
                      train=False,
                      transform=transforms.ToTensor(),
                      download=True)

"""#파라미터 설정 : 학습률, 배치 사이즈, 에포크"""

learning_rate=0.001
batch_size=100
epochs=30

"""#Data Load"""

data_loader=torch.utils.data.DataLoader(dataset=train_data,
                                        batch_size=batch_size,
                                        shuffle=True,
                                        drop_last=True)

"""#CNN 설계
##합성곱층 3개, 전결합층 2개
####합성곱층 1 -> 입력 채널 : 1, 커널 수 : 32, 커널 크기 : 3, 활성화함수 : ReLU, MAXPool : 2x2
####합성곱층 2 -> 입력 채널 : 32, 커널 수 : 64, 커널 크기 : 3, 활성화함수 : ReLU, MAXPool : 2x2
####합성곱층 3 -> 입력 채널 : 64, 커널 수 : 64, 커널 크기 : 3, 활성화함수 : ReLU

####평탄화

####전결합층 1 -> 입력 개수 : fc(out).size(1), 출력 개수 : 64
####전결합층 2 -> 입력 개수 : 64, 출력 개수 : 10
"""

class CNN(torch.nn.Module):
  def __init__(self):
    super(CNN, self).__init__()

    self.layer1=nn.Sequential(nn.Conv2d(1, 32, 3),
                              nn.ReLU(),
                              nn.MaxPool2d(2))

    self.layer2=nn.Sequential(nn.Conv2d(32, 64, 3),
                              nn.ReLU(),
                              nn.MaxPool2d(2))

    self.layer3=nn.Sequential(nn.Conv2d(64, 64, 3),
                              nn.ReLU())


    self.fc1 = nn.Linear(576, 64, bias=True)
    torch.nn.init.xavier_uniform_(self.fc1.weight)


    self.layer4 = torch.nn.Sequential(
            self.fc1,
            nn.ReLU(),
            nn.Dropout(0.5))


    self.fc2=nn.Linear(64, 10, bias=True)
    torch.nn.init.xavier_uniform_(self.fc2.weight)

  def forward(self, x):
    out=self.layer1(x)
    out=self.layer2(out)
    out=self.layer3(out)

    out=out.view(out.size(0), -1)

    out=self.layer4(out)
    out=self.fc2(out)

    return out

class myCNN(torch.nn.Module):

    def __init__(self):
        super(CNN, self).__init__()
        self.keep_prob = 0.5

        self.layer1 = torch.nn.Sequential(
            torch.nn.Conv2d(1, 32, kernel_size=3, stride=1, padding=1),
            torch.nn.ReLU(),
            torch.nn.MaxPool2d(kernel_size=2, stride=2))

        self.layer2 = torch.nn.Sequential(
            torch.nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),
            torch.nn.ReLU(),
            torch.nn.MaxPool2d(kernel_size=2, stride=2))

        self.layer3 = torch.nn.Sequential(
            torch.nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),
            torch.nn.ReLU(),
            torch.nn.MaxPool2d(kernel_size=2, stride=2, padding=1))


        self.fc1 = torch.nn.Linear(4 * 4 * 128, 625, bias=True)
        torch.nn.init.xavier_uniform_(self.fc1.weight)

        self.layer4 = torch.nn.Sequential(
            self.fc1,
            torch.nn.ReLU(),
            torch.nn.Dropout(p=1 - self.keep_prob))

        self.fc2 = torch.nn.Linear(625, 10, bias=True)
        torch.nn.init.xavier_uniform_(self.fc2.weight)

    def forward(self, x):
        out = self.layer1(x)
        out = self.layer2(out)
        out = self.layer3(out)
        out = out.view(out.size(0), -1)
        out = self.layer4(out)
        out = self.fc2(out)
        return out

"""#모델 선언"""

model=CNN().to(device)

"""#비용 함수 & 옵티마이저"""

Cost=nn.CrossEntropyLoss().to(device)
optimizer=optim.Adam(model.parameters(), lr=learning_rate)

Cost=nn.CrossEntropyLoss().to(device)
optimizer=optim.SGD(model.parameters(), lr=learning_rate)

"""#Total batch size"""

total_batch=len(data_loader)
print(total_batch)
for batch in data_loader:
  x, y=batch

print(len(x))
print(len(y))

"""#학습"""

for epoch in range(epochs):
  avg_cost=0

  for X, Y in data_loader:
    X=X.to(device)
    Y=Y.to(device)

    optimizer.zero_grad()
    H=model(X)
    cost=Cost(H, Y)
    cost.backward()
    optimizer.step()

    avg_cost+=cost/total_batch

  print('[Epoch : {:>4}] cost : {:>9}'.format(epoch+1, avg_cost))

"""#평가"""

with torch.no_grad():
    X_test = test_data.test_data.view(len(test_data), 1, 28, 28).float().to(device)
    Y_test = test_data.test_labels.to(device)

    prediction = model(X_test)
    correct_prediction = torch.argmax(prediction, 1) == Y_test
    accuracy = correct_prediction.float().mean()
    print('Accuracy:', accuracy.item())